{"version":3,"sources":["imgs/logo.svg","imgs/verified.svg","forms/OrderForm.js","forms/ShipmentForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","OrderForm","setOrderStep","useState","cardname","cardnumber","carddate","cardcvv","formValues","setFormValues","errors","setErrors","handleChange","e","target","name","value","formValidation","tempErrors","key","Object","values","includes","action","className","onSubmit","preventDefault","TextField","placeholder","onChange","error","variant","fullWidth","inputProps","maxLength","Button","type","ShipmentForm","username","city","address","country","zip","console","log","Autocomplete","options","autoHighlight","getOptionLabel","option","renderInput","params","App","orderStep","src","logo","alt","0","1","2","verified","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,8OCwG5BC,MArGf,YAAsC,IAAjBC,EAAgB,EAAhBA,aAAgB,EACCC,mBAAS,CAC3CC,SAAU,GACVC,WAAY,GACZC,SAAU,GACVC,QAAS,KALwB,mBAC5BC,EAD4B,KAChBC,EADgB,OAQPN,mBAAS,CACnCC,UAAU,EACVC,YAAY,EACZC,UAAU,EACVC,SAAS,IAZwB,mBAQ5BG,EAR4B,KAQpBC,EARoB,KAe7BC,EAAe,SAACC,GAAO,IAAD,EACFA,EAAEC,OAAlBC,EADkB,EAClBA,KAAMC,EADY,EACZA,MACdP,EAAc,2BAAKD,GAAN,kBAAmBO,EAAOC,KACnCA,IAA0B,IAAjBN,EAAOK,IAAgBJ,EAAU,2BAAKD,GAAN,kBAAeK,GAAO,MAQ/DE,EAAiB,WACrB,IAAIC,EAAa,GACjB,IAAK,IAAIC,KAAOX,EACbA,EAAWW,GAAmCD,EAAWC,IAAO,EAA7CD,EAAWC,IAAO,EAEnCC,OAAOC,OAAOH,GAAYI,UAAS,IACtCpB,EAAa,GAEfS,EAAUO,IAGZ,OACE,0BAAMK,OAAO,GAAGC,UAAU,OAAOC,SAjBd,SAACZ,GACpBA,EAAEa,iBACFT,MAgBE,wBAAIO,UAAU,eAAd,wCAEA,2BAAOA,UAAU,kBACf,6FACA,kBAACG,EAAA,EAAD,CACEC,YAAY,oBACZb,KAAK,WACLC,MAAOR,EAAWJ,SAClByB,SAAUjB,EACVkB,MAAOpB,EAAON,SACd2B,QAAQ,WACRC,WAAS,KAIb,2BAAOR,UAAU,oBACf,4FACA,kBAACG,EAAA,EAAD,CACEC,YAAY,sBACZK,WAAY,CAAEC,UAAW,IACzBnB,KAAK,aACLC,MAAOR,EAAWH,WAClBwB,SAAUjB,EACVkB,MAAOpB,EAAOL,WACd0B,QAAQ,WACRC,WAAS,KAIb,2BAAOR,UAAU,kBACf,uDACA,kBAACG,EAAA,EAAD,CACEC,YAAY,UACZb,KAAK,WACLC,MAAOR,EAAWF,SAClBuB,SAAUjB,EACVkB,MAAOpB,EAAOJ,SACdyB,QAAQ,WACRC,WAAS,KAIb,2BAAOR,UAAU,iBACf,kCACA,kBAACG,EAAA,EAAD,CACEC,YAAY,GACZb,KAAK,UACLC,MAAOR,EAAWD,QAClBsB,SAAUjB,EACVkB,MAAOpB,EAAOH,QACdwB,QAAQ,WACRC,WAAS,KAIb,kBAACG,EAAA,EAAD,CAAQC,KAAK,SAASL,QAAQ,YAAYP,UAAU,gBAApD,sD,SCiCSa,MA9Hf,YAAyC,IAAjBnC,EAAgB,EAAhBA,aAAgB,EAEFC,mBAAS,CAC3CmC,SAAU,GACVC,KAAM,GACNC,QAAS,GACTC,QAAS,KACTC,IAAK,KAP+B,mBAE/BlC,EAF+B,KAEnBC,EAFmB,OAUVN,mBAAS,CACnCoC,MAAM,EACNC,SAAS,EACTC,SAAS,EACTC,KAAK,EACLJ,UAAU,IAf0B,mBAU/B5B,EAV+B,KAUvBC,EAVuB,KAkBhCC,EAAe,SAACC,GAAO,IAAD,EACFA,EAAEC,OAAlBC,EADkB,EAClBA,KAAMC,EADY,EACZA,MACd2B,QAAQC,IAAI/B,EAAEC,OAAOC,MACrBN,EAAc,2BAAKD,GAAN,kBAAmBO,EAAOC,KACnCA,IAA0B,IAAjBN,EAAOK,IAAgBJ,EAAU,2BAAKD,GAAN,kBAAeK,GAAO,MAc/DE,EAAiB,WACrB,IAAIC,EAAa,GACjB,IAAK,IAAIC,KAAOX,EACbA,EAAWW,GAAmCD,EAAWC,IAAO,EAA7CD,EAAWC,IAAO,EAEnCC,OAAOC,OAAOH,GAAYI,UAAS,IACtCpB,EAAa,GAEfS,EAAUO,IAGZ,OACE,0BAAMK,OAAO,GAAGC,UAAU,OAAOC,SAjBd,SAACZ,GACpBA,EAAEa,iBACFT,MAgBE,wBAAIO,UAAU,eAAd,oIAEA,2BAAOA,UAAU,kBACf,2FACA,kBAACG,EAAA,EAAD,CACEC,YAAY,qBACZb,KAAK,WACLC,MAAOR,EAAW8B,SAClBT,SAAUjB,EACVkB,MAAOpB,EAAO4B,SACdP,QAAQ,WACRC,WAAS,KAIb,2BAAOR,UAAU,cACf,uBAAGA,UAAU,mBAAb,kCACA,kBAACG,EAAA,EAAD,CACEC,YAAY,iCACZb,KAAK,OACLC,MAAOR,EAAW+B,KAClBV,SAAUjB,EACVkB,MAAOpB,EAAO6B,KACdR,QAAQ,WACRC,WAAS,KAIb,2BAAOR,UAAU,iBACf,kBAACG,EAAA,EAAD,CACEC,YAAY,iCACZb,KAAK,UACLC,MAAOR,EAAWgC,QAClBX,SAAUjB,EACVkB,MAAOpB,EAAO8B,QACdT,QAAQ,WACRC,WAAS,KAIb,2BAAOR,UAAU,iBACf,kBAACqB,EAAA,EAAD,CACEC,QA1FU,CAAC,uCAAU,uCAAU,6CAAW,wCA2F1C/B,KAAK,UACLc,SApEyB,SAAChB,EAAGG,GACnCP,EAAc,2BAAKD,GAAN,IAAkBiC,QAASzB,KACpCA,IAA4B,IAAnBN,EAAO+B,SAClB9B,EAAU,2BAAKD,GAAN,IAAc+B,SAAS,MAkE5BM,eAAa,EACbC,eAAgB,SAACC,GAAD,OAAYA,GAC5BC,YAAa,SAACC,GAAD,OACX,kBAACxB,EAAA,EAAD,iBACMwB,EADN,CAEEvB,YAAY,uCACZG,QAAQ,WACRf,MAAOR,EAAWiC,QAClBX,MAAOpB,EAAO+B,eAMtB,2BAAOjB,UAAU,aACf,kBAACG,EAAA,EAAD,CACEC,YAAY,uCACZb,KAAK,MACLC,MAAOR,EAAWkC,IAClBb,SAAUjB,EACVkB,MAAOpB,EAAOgC,IACdX,QAAQ,cAIZ,kBAACI,EAAA,EAAD,CAAQC,KAAK,SAASL,QAAQ,YAAYP,UAAU,gBAApD,kE,MC9ES4B,MArCf,WAAgB,IAAD,EACqBjD,mBAAS,GAD9B,mBACNkD,EADM,KACKnD,EADL,KAKb,OACE,yBAAKsB,UAAU,OACb,4BAAQA,UAAU,UAChB,yBAAKA,UAAU,mBACb,0BAAMA,UAAU,iBAAhB,+FACA,yBAAK8B,IAAKC,IAAM/B,UAAU,eAAegC,IAAI,WAGjD,0BAAMhC,UAAU,WACd,yBAAKA,UAAS,qBAXA,CAAEiC,EAAG,YAAaC,EAAG,aAAcC,EAAG,aAWVN,KACxC,yBAAK7B,UAAU,oBACb,kFACA,uEAEF,yBAAKA,UAAU,iBACE,IAAd6B,EACC,kBAAC,EAAD,CAAcnD,aAAcA,IACZ,IAAdmD,EACF,kBAAC,EAAD,CAAWnD,aAAcA,IAEzB,yBAAKsB,UAAU,WACb,yBAAK8B,IAAKM,IAAUJ,IAAI,KACxB,iFCvBIK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/C,GACLa,QAAQb,MAAMA,EAAMgD,c","file":"static/js/main.dccddb71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.890a3279.svg\";","module.exports = __webpack_public_path__ + \"static/media/verified.33b1d305.svg\";","import React, { useState } from \"react\";\nimport { TextField, Button } from \"@material-ui/core\";\n\nfunction OrderForm({ setOrderStep }) {\n  const [formValues, setFormValues] = useState({\n    cardname: \"\",\n    cardnumber: \"\",\n    carddate: \"\",\n    cardcvv: \"\",\n  });\n\n  const [errors, setErrors] = useState({\n    cardname: false,\n    cardnumber: false,\n    carddate: false,\n    cardcvv: false,\n  });\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormValues({ ...formValues, [name]: value });\n    if (value && errors[name] === true) setErrors({ ...errors, [name]: false });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    formValidation();\n  };\n\n  const formValidation = () => {\n    var tempErrors = {};\n    for (var key in formValues) {\n      !formValues[key] ? (tempErrors[key] = true) : (tempErrors[key] = false);\n    }\n    if (!Object.values(tempErrors).includes(true)) {\n      setOrderStep(2);\n    }\n    setErrors(tempErrors);\n  };\n\n  return (\n    <form action=\"\" className=\"form\" onSubmit={handleSubmit}>\n      <h3 className=\"form__title\">Оплата</h3>\n\n      <label className=\"form__cardname\">\n        <p>Имя на карте</p>\n        <TextField\n          placeholder=\"Konstantin Ivanov\"\n          name=\"cardname\"\n          value={formValues.cardname}\n          onChange={handleChange}\n          error={errors.cardname}\n          variant=\"outlined\"\n          fullWidth\n        />\n      </label>\n\n      <label className=\"form__cardnumber\">\n        <p>Номер карты</p>\n        <TextField\n          placeholder=\"xxxx xxxx xxxx xxxx\"\n          inputProps={{ maxLength: 16 }}\n          name=\"cardnumber\"\n          value={formValues.cardnumber}\n          onChange={handleChange}\n          error={errors.cardnumber}\n          variant=\"outlined\"\n          fullWidth\n        ></TextField>\n      </label>\n\n      <label className=\"form__carddate\">\n        <p>Срок</p>\n        <TextField\n          placeholder=\"MM / YY\"\n          name=\"carddate\"\n          value={formValues.carddate}\n          onChange={handleChange}\n          error={errors.carddate}\n          variant=\"outlined\"\n          fullWidth\n        />\n      </label>\n\n      <label className=\"form__cardcvv\">\n        <p>CVV</p>\n        <TextField\n          placeholder=\"\"\n          name=\"cardcvv\"\n          value={formValues.cardcvv}\n          onChange={handleChange}\n          error={errors.cardcvv}\n          variant=\"outlined\"\n          fullWidth\n        />\n      </label>\n\n      <Button type=\"submit\" variant=\"contained\" className=\"form__button\">\n        Оплатить\n      </Button>\n    </form>\n  );\n}\n\nexport default OrderForm;\n","import React, { useState } from \"react\";\nimport { TextField, Button } from \"@material-ui/core\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nfunction ShipmentForm({ setOrderStep }) {\n  const countries = [\"Россия\", \"Канада\", \"Мексика\", \"Агнлия\"];\n  const [formValues, setFormValues] = useState({\n    username: \"\",\n    city: \"\",\n    address: \"\",\n    country: null,\n    zip: \"\",\n  });\n\n  const [errors, setErrors] = useState({\n    city: false,\n    address: false,\n    country: false,\n    zip: false,\n    username: false,\n  });\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    console.log(e.target.name);\n    setFormValues({ ...formValues, [name]: value });\n    if (value && errors[name] === true) setErrors({ ...errors, [name]: false });\n  };\n\n  const handleChangeAutocomplete = (e, value) => {\n    setFormValues({ ...formValues, country: value });\n    if (value && errors.country === true)\n      setErrors({ ...errors, country: false });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    formValidation();\n  };\n\n  const formValidation = () => {\n    var tempErrors = {};\n    for (var key in formValues) {\n      !formValues[key] ? (tempErrors[key] = true) : (tempErrors[key] = false);\n    }\n    if (!Object.values(tempErrors).includes(true)) {\n      setOrderStep(1);\n    }\n    setErrors(tempErrors);\n  };\n\n  return (\n    <form action=\"\" className=\"form\" onSubmit={handleSubmit}>\n      <h3 className=\"form__title\">Информация для доставки</h3>\n\n      <label className=\"form__username\">\n        <p>Получатель</p>\n        <TextField\n          placeholder=\"ФИО\"\n          name=\"username\"\n          value={formValues.username}\n          onChange={handleChange}\n          error={errors.username}\n          variant=\"outlined\"\n          fullWidth\n        />\n      </label>\n\n      <label className=\"form__city\">\n        <p className=\"--double-margin\">Адрес</p>\n        <TextField\n          placeholder=\"Город\"\n          name=\"city\"\n          value={formValues.city}\n          onChange={handleChange}\n          error={errors.city}\n          variant=\"outlined\"\n          fullWidth\n        />\n      </label>\n\n      <label className=\"form__address\">\n        <TextField\n          placeholder=\"Адрес\"\n          name=\"address\"\n          value={formValues.address}\n          onChange={handleChange}\n          error={errors.address}\n          variant=\"outlined\"\n          fullWidth\n        />\n      </label>\n\n      <label className=\"form__country\">\n        <Autocomplete\n          options={countries}\n          name=\"country\"\n          onChange={handleChangeAutocomplete}\n          autoHighlight\n          getOptionLabel={(option) => option}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              placeholder=\"Страна\"\n              variant=\"outlined\"\n              value={formValues.country}\n              error={errors.country}\n            />\n          )}\n        />\n      </label>\n\n      <label className=\"form__zip\">\n        <TextField\n          placeholder=\"Индекс\"\n          name=\"zip\"\n          value={formValues.zip}\n          onChange={handleChange}\n          error={errors.zip}\n          variant=\"outlined\"\n        />\n      </label>\n\n      <Button type=\"submit\" variant=\"contained\" className=\"form__button\">\n        Продолжить\n      </Button>\n    </form>\n  );\n}\n\nexport default ShipmentForm;\n","import React, { useState } from \"react\";\nimport logo from \"./imgs/logo.svg\";\nimport verified from \"./imgs/verified.svg\";\nimport OrderForm from \"./forms/OrderForm\";\nimport ShipmentForm from \"./forms/ShipmentForm\";\n\nimport \"./App.sass\";\n\nfunction App() {\n  const [orderStep, setOrderStep] = useState(0);\n\n  const cardClasses = { 0: \"firstStep\", 1: \"secondStep\", 2: \"thirdStep\" };\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"header__wrapper\">\n          <span className=\"header__title\">Тестовое задание</span>\n          <img src={logo} className=\"header__logo\" alt=\"Logo\" />\n        </div>\n      </header>\n      <main className=\"content\">\n        <div className={`card card--${cardClasses[orderStep]}`}>\n          <div className=\"card__pagination\">\n            <span>Доставка</span>\n            <span>Оплата</span>\n          </div>\n          <div className=\"card__content\">\n            {orderStep === 0 ? (\n              <ShipmentForm setOrderStep={setOrderStep} />\n            ) : orderStep === 1 ? (\n              <OrderForm setOrderStep={setOrderStep} />\n            ) : (\n              <div className=\"confirm\">\n                <img src={verified} alt=\"\" />\n                <h3>Спасибо!</h3>\n              </div>\n            )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}